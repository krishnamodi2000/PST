using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EcommAppDAL.Models
{/// <summary>
/// This is Address EF Core For Address Table.
/// </summary>
    [Table("Address")]
    public class Address
    {
        /// <summary>
        /// refereed in address tale
        /// </summary>
        [Key]
        [Column("ID")] //autogenerated
        public int AddressId { get; set; }
       
        [Required]
        [DataType("int")]
        [Column("House Number")]
        public int AddressHouseNumber { get; set; }
        /// <summary>
        /// Rquires building name,max length 50, Name cannot me more than 50 characters. Consider adding shortform
        /// </summary>
        [Required]
        [DataType("varchar")]
        [Column("Building Name")]
        [MaxLength(50, ErrorMessage = "Name cannot me more than 50 characters. Consider adding shortform")]
        public string AddressBuildingName { get; set; }
        [Required]
        [DataType("varchar")]
        [Column("AreaOrColony Name")]
        [MaxLength(100, ErrorMessage = "Name cannot me more than 100 characters. Consider adding shortform")]
        public string AddressAreaName { get; set; }
        [DataType("varchar")]
        [Column("Type")]
        [MaxLength(10, ErrorMessage = "Name cannot me more than 100 characters. Consider adding shortform")]
        public string? AddressType { get; set; }
        [Required]
        [DataType("int")]
        [Column("Pincode")]
        public int Pincode { get; set; }
        [ForeignKey("City")]
        public int? CityId { get; set; } //adding foreign key from city table //make sure it's non nullable
        public virtual City? City { get; set; }
        [ForeignKey("State")]
        public int? StateId { get; set; } //adding foreign key from state table //make sure it's non nullable
        public virtual State? State { get; set; }
        [ForeignKey("User")]
        public int? UserId { get; set; } //adding foreign key from user table //make sure it's non nullable
        public virtual User? User { get; set; }


    }
}
